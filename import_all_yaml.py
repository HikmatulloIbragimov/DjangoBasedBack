import requests
import yaml
from django.conf import settings
from app.models import Category, Merchandise
from django.db import transaction
import os
import django

# –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ settings.py
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bek.settings')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π Django
django.setup()
# –°–ø–∏—Å–æ–∫ —Å–ª—É–≥–æ–≤ (–ø–æ URL –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
GAME_SLUGS = [
    "free-fire",
    "pubg",
    "fc-mobile",
    "leage-of-legends",
    "mobile-legends-global",
    "arena-of-valor-id",
    "hok",
    "genshin-impact",
    "blood-strike",
    "arena-breakout",
    "steam-gift-card-usd"
]

BASE_URL = "https://djangobasedback-production.up.railway.app/cdn/config/game/"

@transaction.atomic
def import_remote_yamls():
    for slug in GAME_SLUGS:
        url = f"{BASE_URL}{slug}.yaml"
        print(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é —Å URL: {url}")
        try:
            res = requests.get(url)
            res.raise_for_status()
            data = yaml.safe_load(res.text)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {slug}: {e}")
            continue

        game_data = data.get("game")
        if not game_data:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ game): {slug}")
            continue

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = game_data.get("categories", [])
        category_map = {}
        for cat in categories:
            category, _ = Category.objects.get_or_create(
                slug=cat["slug"],
                defaults={
                    "name": cat["name"],
                    "name_ru": cat.get("name_ru", ""),
                    "name_en": cat.get("name_en", ""),
                    "description": cat.get("description", ""),
                    "description_ru": cat.get("description_ru", ""),
                    "description_en": cat.get("description_en", ""),
                }
            )
            category_map[cat["slug"]] = category

        # –¢–æ–≤–∞—Ä—ã
        merchandise = game_data.get("merchandise", [])
        for item in merchandise:
            price = item["prices"][0]["price"]
            category = category_map.get(item["category"])
            Merchandise.objects.update_or_create(
                slug=item["slug"],
                defaults={
                    "name": item["name"],
                    "name_ru": item.get("name_ru", ""),
                    "name_en": item.get("name_en", ""),
                    "price": price,
                    "enabled": True,
                    "category": category,
                    "server": item.get("server", "")
                }
            )
    print("‚úÖ –ò–º–ø–æ—Ä—Ç —Å –¥–µ–ø–ª–æ—è –∑–∞–≤–µ—Ä—à—ë–Ω.")
